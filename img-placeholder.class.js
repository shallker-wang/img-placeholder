// Generated by CoffeeScript 1.4.0
(function() {

  (function() {
    var imgPlaceholder,
      _this = this;
    imgPlaceholder = (function() {

      imgPlaceholder.prototype.imgs = [];

      imgPlaceholder.prototype.imgColor = '000';

      imgPlaceholder.prototype.imgBGColor = 'DDD';

      imgPlaceholder.prototype.imgAlt = '';

      imgPlaceholder.prototype.imgFormat = ['jpg', 'jpeg', 'png', 'gif'];

      function imgPlaceholder() {
        this.imgs = document.getElementsByTagName('img');
        this.placeholder(this.imgs);
      }

      imgPlaceholder.prototype.placeholder = function(imgs) {
        var img, result, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = imgs.length; _i < _len; _i++) {
          img = imgs[_i];
          if (!this.valide(img)) {
            continue;
          }
          result = this.parse(img);
          img.width = result.width;
          img.height = result.height;
          img.alt = result.alt;
          img.style.color = "#" + result.color;
          _results.push(img.style.backgroundColor = "#" + result.bgcolor);
        }
        return _results;
      };

      imgPlaceholder.prototype.valide = function(img) {
        var format, strEndsWith, _i, _len, _ref;
        if (img.src === '') {
          return false;
        }
        if (img.src === window.location.href) {
          return false;
        }
        strEndsWith = function(str, end) {
          return str.indexOf(end, str.length - end.length) !== -1;
        };
        _ref = this.imgFormat;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          format = _ref[_i];
          if (strEndsWith(img.src, format)) {
            return false;
          }
        }
        return true;
      };

      imgPlaceholder.prototype.parse = function(img) {
        var result, sets, size, sizeStr, _ref, _ref1, _ref2, _ref3, _ref4;
        sets = img.src.split('#');
        sizeStr = sets[0].split('/').pop();
        size = sizeStr.split('x');
        result = {
          width: (_ref = size[0]) != null ? _ref : 0,
          height: (_ref1 = size[1]) != null ? _ref1 : 0,
          bgcolor: (_ref2 = sets[1]) != null ? _ref2 : this.imgBGColor,
          color: (_ref3 = sets[2]) != null ? _ref3 : this.imgColor,
          alt: (_ref4 = sets[3]) != null ? _ref4 : sizeStr
        };
        return result;
      };

      return imgPlaceholder;

    })();
    return document.addEventListener('DOMContentLoaded', function() {
      return new imgPlaceholder();
    });
  })();

}).call(this);
